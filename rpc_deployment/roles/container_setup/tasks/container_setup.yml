---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Obtain the Systems SSH-Key
  set_fact:
    container_ssh_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
  delegate_to: "{{ physical_host }}"

- name: Fail when empty or non-existent SSH pub key
  fail: msg="Failing - ~/.ssh/id_rsa.pub file doesn't exist or is empty"
  when: container_ssh_key == ""
  delegate_to: "{{ physical_host }}"

- name: Create Required local monitoring directories
  file:
    path: "{{ item }}"
    state: "directory"
  with_items:
    - "/openstack/backup/{{ container_name }}"
    - "/openstack/log/{{ container_name }}"
  delegate_to: "{{ physical_host }}"

- name: Basic Inner Container Setup
  lxc:
    name: "{{ container_name }}"
    command: "attach"
    container_command: |
      mkdir -p ~/.ssh/
      if [ ! -f "~/.ssh/authorized_keys" ];then
        touch ~/.ssh/authorized_keys
      fi
      grep '{{ container_ssh_key }}' ~/.ssh/authorized_keys || echo '{{ container_ssh_key }}' | tee -a ~/.ssh/authorized_keys
      # Create internal directories
      mkdir -p /monitoring
      mkdir -p /etc/network/interfaces.d
      mkdir -p /var/backup
      mkdir -p '/var/log/{{ service_name }}'
      mkdir -p '/etc/{{ service_name }}'
      sed -i 's/PermitRootLogin.*/PermitRootLogin\ yes/g' /etc/ssh/sshd_config
      service ssh restart
      apt-get update
      apt-get -y install python2.7
      rm /usr/bin/python
      ln -s /usr/bin/python2.7 /usr/bin/python
      echo -e '{{ default_interfaces }}' | tee /etc/network/interfaces
      echo -e '{{ management_interface }}' | tee /etc/network/interfaces.d/management.cfg
  delegate_to: "{{ physical_host }}"

- name: Run proxy config
  lxc:
    name: "{{ container_name }}"
    command: "attach"
    container_command: |
      if ! grep '{{ item.key }}={{ item.value }}' /etc/environment; then
        echo '{{ item.key }}={{ item.value }}' | tee -a /etc/environment
      fi
  with_dict: global_environment_variables | default({})
  when: global_environment_variables is defined
  delegate_to: "{{ physical_host }}"
  tags:
    - lxc-container-proxy

- name: Ensure Required container config options
  lxc:
    name: "{{ container_name }}"
    command: config
    options:
      - "lxc.mount.entry=/openstack/log/{{ container_name }} var/log/{{ service_name }} none defaults,bind,rw 0 0"
      - "lxc.mount.entry=/openstack/backup/{{ container_name }} var/backup none defaults,bind,rw 0 0"
    state: running
  delegate_to: "{{ physical_host }}"
